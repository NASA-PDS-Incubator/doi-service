# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from pds_doi_api.models.base_model_ import Model
from pds_doi_api.models.doi_summary import DoiSummary  # noqa: F401,E501
from pds_doi_api import util


class DoiRecord(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, doi: str = None, lid: str = None, vid: str = None,
                 submitter: str = None, status: str = None,
                 creation_date: datetime = None, update_date: datetime = None,
                 record: str = None, message: str = None):  # noqa: E501
        """DoiRecord - a model defined in Swagger

        :param doi: The doi of this DoiRecord.  # noqa: E501
        :type doi: str
        :param lid: The lid of this DoiRecord.  # noqa: E501
        :type lid: str
        :param vid: The vid of this DoiRecord.  # noqa: E501
        :type vid: str
        :param submitter: The submitter of this DoiRecord.  # noqa: E501
        :type submitter: str
        :param status: The status of this DoiRecord.  # noqa: E501
        :type status: str
        :param creation_date: The creation_date of this DoiRecord.  # noqa: E501
        :type creation_date: datetime
        :param update_date: The update_date of this DoiRecord.  # noqa: E501
        :type update_date: datetime
        :param record: The record of this DoiRecord.  # noqa: E501
        :type record: str
        :param message: The message of this DoiRecord.  # noqa: E501
        :type message: str
        """
        self.swagger_types = {
            'doi': str,
            'lid': str,
            'vid': str,
            'submitter': str,
            'status': str,
            'creation_date': datetime,
            'update_date': datetime,
            'record': str,
            'message': str
        }

        self.attribute_map = {
            'doi': 'doi',
            'lid': 'lid',
            'vid': 'vid',
            'submitter': 'submitter',
            'status': 'status',
            'creation_date': 'creation_date',
            'update_date': 'update_date',
            'record': 'record',
            'message': 'message'
        }
        self._doi = doi
        self._lid = lid
        self._vid = vid
        self._submitter = submitter
        self._status = status
        self._creation_date = creation_date
        self._update_date = update_date
        self._record = record
        self._message = message

    @classmethod
    def from_dict(cls, dikt) -> 'DoiRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The doi_record of this DoiRecord.  # noqa: E501
        :rtype: DoiRecord
        """
        return util.deserialize_model(dikt, cls)

    @property
    def doi(self) -> str:
        """Gets the doi of this DoiRecord.


        :return: The doi of this DoiRecord.
        :rtype: str
        """
        return self._doi

    @doi.setter
    def doi(self, doi: str):
        """Sets the doi of this DoiRecord.


        :param doi: The doi of this DoiRecord.
        :type doi: str
        """

        self._doi = doi

    @property
    def lid(self) -> str:
        """Gets the lid of this DoiRecord.


        :return: The lid of this DoiRecord.
        :rtype: str
        """
        return self._lid

    @lid.setter
    def lid(self, lid: str):
        """Sets the lid of this DoiRecord.


        :param lid: The lid of this DoiRecord.
        :type lid: str
        """

        self._lid = lid

    @property
    def vid(self) -> str:
        """Gets the vid of this DoiRecord.


        :return: The vid of this DoiRecord.
        :rtype: str
        """
        return self._vid

    @vid.setter
    def vid(self, vid: str):
        """Sets the vid of this DoiRecord.


        :param vid: The vid of this DoiRecord.
        :type vid: str
        """

        self._vid = vid

    @property
    def submitter(self) -> str:
        """Gets the submitter of this DoiRecord.


        :return: The submitter of this DoiRecord.
        :rtype: str
        """
        return self._submitter

    @submitter.setter
    def submitter(self, submitter: str):
        """Sets the submitter of this DoiRecord.


        :param submitter: The submitter of this DoiRecord.
        :type submitter: str
        """

        self._submitter = submitter

    @property
    def status(self) -> str:
        """Gets the status of this DoiRecord.


        :return: The status of this DoiRecord.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this DoiRecord.


        :param status: The status of this DoiRecord.
        :type status: str
        """

        self._status = status

    @property
    def creation_date(self) -> datetime:
        """Gets the creation_date of this DoiRecord.


        :return: The creation_date of this DoiRecord.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date: datetime):
        """Sets the creation_date of this DoiRecord.


        :param creation_date: The creation_date of this DoiRecord.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def update_date(self) -> datetime:
        """Gets the update_date of this DoiRecord.


        :return: The update_date of this DoiRecord.
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date: datetime):
        """Sets the update_date of this DoiRecord.


        :param update_date: The update_date of this DoiRecord.
        :type update_date: datetime
        """

        self._update_date = update_date

    @property
    def record(self) -> str:
        """Gets the record of this DoiRecord.


        :return: The record of this DoiRecord.
        :rtype: str
        """
        return self._record

    @record.setter
    def record(self, record: str):
        """Sets the record of this DoiRecord.


        :param record: The record of this DoiRecord.
        :type record: str
        """

        self._record = record

    @property
    def message(self) -> str:
        """Gets the message of this DoiRecord.


        :return: The message of this DoiRecord.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this DoiRecord.


        :param message: The message of this DoiRecord.
        :type message: str
        """

        self._message = message
