name: dev build release

on:
  push:
      branches:
        - master

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.actor != 'pdsen-ci'

    strategy:
      matrix:
        python-version: [3.7]

    steps:
    - uses: actions/checkout@v2
      with:
        lfs: true
        token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 pds_doi_core --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    - name: Deploy locally
      run: |
        pip install .
    - name: Update default configuration
      run: |
        import sys
        import os
        from pathlib import Path
        conf_dir = os.path.join(sys.prefix, "pds_doi_core")
        Path(conf_dir).mkdir(parents=True, exist_ok=True)
        conf_file = os.path.join(conf_dir, "conf.ini")
        print(f"Create config file for unit test {conf_file}")
        with open(conf_file, "w") as f:
            f.write("[OSTI]\n")
            f.write("user = {}\n".format("${{secrets.osti_login}}"))
            f.write("password = {}\n".format("${{secrets.osti_password}}"))
      shell: python
    - name: Unit Tests
      run: |
        pip install pytest
        pytest
    - name: Create the package
      run: |
        pip install setuptools wheel
        rm -f dist/*
        python setup.py sdist bdist_wheel
    # the releases are available on https://github.com/NASA-PDS/<you repo>/releases
    - name: Clean previous dev/snapsoht tags
      run: |
        git fetch --prune --unshallow --tags
        git tag -l | grep 'dev' | xargs -t -I arg sh -c 'git tag -d arg;git push --delete origin arg;'
    - name: Publish new snapshot release
      run: |
        pip install pds-github-util
        python-snapshot-release --token ${{ secrets.ADMIN_GITHUB_TOKEN }}
    - name: Publish the Python distribution to test PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: ${{ secrets.pypi_username }}
        password: ${{ secrets.pypi_password }}
        repository_url: https://test.pypi.org/legacy/
        skip_existing: true
        package_dir: dist/
    - name: ðŸ–‹ Writing documentation (to be move to stable when ready)
      run: |
        sudo apt-get install python3-sphinx
        pip install -r requirements.txt
        cd docs
        sphinx-build -b html source build -a
    - name: ðŸ“’ Publishing to GitHub Pages
      if: success()
      uses: JamesIves/github-pages-deploy-action@3.5.9
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BRANCH: gh-pages # The branch the action should deploy to.
        FOLDER: docs/build # The folder the action should deploy.
    # the changelog will be available on https://nasa-pds.github.io/<your repo>/CHANGELOG
    #- uses: actions/checkout@v2
    #  with:
    #    ref: gh-pages
    #
    - name: create changelog
      run: |
        #sudo gem install github_changelog_generator
        # deploy from source, does no work yet, nice to have for a feature to have issues' labels in changelog
        git clone https://github.com/github-changelog-generator/github-changelog-generator.git
        #gem sources --add https://rubygems.org/
        cd github-changelog-generator
        git checkout 322e30a78115ab948e358cd916a9f78e55fe21c1
        gem build github_changelog_generator.gemspec
        sudo gem install github_changelog_generator-1.15.2.gem  --source http://rubygems.org
        cd ..
        github_changelog_generator --user NASA-PDS --project pds-doi-service  --output CHANGELOG.md --token ${{ secrets.ADMIN_GITHUB_TOKEN }} --configure-sections '{"improvements":{"prefix":"**Improvements:**","labels":["Epic"]},"defects":{"prefix":"**Defects:**","labels":["bug"]},"deprecations":{"prefix":"**Deprecations:**","labels":["deprecation"]}}' --no-pull-requests  --issues-label '**Other closed issues:**' --issue-line-labels high,low,medium
    - name: Create requirements
      run: |
        echo ::set-env name=REQUIREMENT_FILE::$(requirement-report --organization NASA-PDS --repository pds-doi-service  --output . --token ${{ secrets.ADMIN_GITHUB_TOKEN }} --dev)
    - name: Commit CHANGELOG.md and requirement files
      run: |
        git config --local user.email "pdsen-ci@github.com"
        git config --local user.name "PDS dev admin"
        git pull origin master
        echo "commit CHANGELOG.md and ${{ env.REQUIREMENT_FILE }} on master branch"
        git add CHANGELOG.md ${{ env.REQUIREMENT_FILE }}
        git commit -m "update changelog and requirements" --allow-empty
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.ADMIN_GITHUB_TOKEN }}
        branch: master
    - name: Ping pdsen-corral
      run: |
        pip install pds-github-util
        git-ping --repo nasa-pds/pdsen-corral --token ${{ secrets.ADMIN_GITHUB_TOKEN }} --branch master --message 'ds-doi-service has been upgrade to ${{ github.ref }}'


